{"version":3,"sources":["components/button.js","components/Calculator.js","components/CalculatorTitle.js","components/outputScreenRow.js","components/outputScreen.js","serviceWorker.js","index.js"],"names":["Button","props","className","type","value","label","onClick","handleClick","Calculator","state","question","answer","bind","event","target","this","ans","eval","err","setState","undefined","str","substr","length","title","console","log","React","Component","CalculatorTitle","OutputScreenRow","readOnly","OutputScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d8eca936.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = (props) => {\r\n    \r\n    return (\r\n        \r\n        <input\r\n            className={props.className}\r\n            type=\"button\"\r\n            value={props.label}\r\n            onClick = {props.handleClick}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport CalculatorTitle from './CalculatorTitle.js';\r\nimport OutputScreen from './outputScreen.js';\r\nimport Button from './button.js';\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            answer: ''\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event){\r\n        const value = event.target.value;\r\n        \r\n        switch (value) {\r\n            case '=': {\r\n                if (this.state.question!=='')\r\n                {\r\n                    var ans='';\r\n                    try\r\n                    {\r\n                        ans = eval(this.state.question);\r\n                    }\r\n                    catch(err)\r\n                    {\r\n                        this.setState({answer: \"Math Error\"});\r\n                    }\r\n                    if (ans===undefined)\r\n                        this.setState({answer: \"Math Error\"});\r\n                    else\r\n                        this.setState({ answer: ans , question: this.state.question});\r\n                }\r\n                break;\r\n            }\r\n            case 'AC': {\r\n                this.setState({ question: '', answer: '' });\r\n                break;\r\n            }\r\n\r\n            case 'DEL': {\r\n                var str = this.state.question;\r\n                str = str.substr(0,str.length-1);\r\n                this.setState({question: str});\r\n                break;\r\n            }\r\n            default: {\r\n                this.setState({ question: this.state.question += value})\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"frame\">\r\n                <CalculatorTitle title=\"CALCULATOR\"/>\r\n                <div className=\"mainCalc\">\r\n                {console.log(this.state)}\r\n                    <OutputScreen question={this.state.question} answer={this.state.answer}/>\r\n                    <div className=\"button-row\">\r\n                        <Button className=\"btnaction\" label={'AC'} handleClick = {this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'DEL'} handleClick={this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'%'} handleClick={this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'/'} handleClick={this.handleClick}/>\r\n                    </div>\r\n                    <div className=\"button-row\">\r\n                        <Button label={'7'} handleClick={this.handleClick}/>\r\n                        <Button label={'8'} handleClick={this.handleClick}/>\r\n                        <Button label={'9'} handleClick={this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'*'} handleClick={this.handleClick}/>\r\n                    </div>\r\n                    <div className=\"button-row\">\r\n                        <Button label={'4'} handleClick={this.handleClick}/>\r\n                        <Button label={'5'} handleClick={this.handleClick}/>\r\n                        <Button label={'6'} handleClick={this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'-'} handleClick={this.handleClick}/>\r\n                    </div>\r\n                    <div className=\"button-row\">\r\n                        <Button label={'1'} handleClick={this.handleClick}/>\r\n                        <Button label={'2'} handleClick={this.handleClick}/>\r\n                        <Button label={'3'} handleClick={this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'+'} handleClick={this.handleClick}/>\r\n                    </div>\r\n                    \r\n                    <div className=\"button-row\">\r\n                        <Button label={'0'} handleClick={this.handleClick}/>\r\n                        <Button label={'.'} handleClick={this.handleClick}/>\r\n                        <Button className=\"btnaction\" label={'='} handleClick={this.handleClick}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\nconst CalculatorTitle = (props) => {\r\n    return (\r\n        <div className=\"calculator-title\">\r\n            { props.title }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorTitle;","import React from 'react';\r\n\r\nconst OutputScreenRow = (props) => {\r\n    return (\r\n        <div className=\"screen-row\">\r\n            <input type=\"text\" readOnly value = {props.value}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OutputScreenRow;","import React from 'react';\r\n\r\nimport OutputScreenRow from './outputScreenRow.js';\r\n\r\nconst OutputScreen = (props) => {\r\n    return (\r\n        <div className=\"screen\">\r\n            <OutputScreenRow value = {props.question}/>\r\n            <OutputScreenRow value = {props.answer}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OutputScreen;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Calculator from \"./components/Calculator\";\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}